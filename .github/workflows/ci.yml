using Moq;
using Lab5Blazor.Models;
using Lab5Blazor.Services;
using Xunit;
using System.Collections.Generic;
using System.Linq;
using static Microsoft.ApplicationInsights.MetricDimensionNames.TelemetryContext;

namespace TestProject1
{

    public class LibraryServiceTests
    {
        private readonly LibraryService _libraryService;

        public LibraryServiceTests()
        {
            // Initialize the LibraryService for testing
            _libraryService = new LibraryService();
        }

        // Test for AddBook() - Ensures a valid book is added to the collection
        [Fact]
        public void AddBook_ShouldAddBook_WhenBookIsValid()
        {
            // Arrange: Create a new Book object
            var book = new Book
            {
                Id = 1,
                Title = "Test Book",
                Author = "Test Author",
                ISBN = "1234567890"
            };

            // Act: Call AddBook to add the book
            _libraryService.AddBook(book);

            // Xunit.Assert: Verify that the book is added to the Books list
            var addedBook = _libraryService.Books.FirstOrDefault(b => b.Id == book.Id);
            Xunit.Assert.NotNull(addedBook);
            Xunit.Assert.Equal("Test Book", addedBook.Title);
            Xunit.Assert.Equal("Test Author", addedBook.Author);
            _libraryService.DeleteBook(book.Id);
        }

        // Test for EditBook()
        [Fact]
        public void EditBook_ShouldUpdateBook_WhenBookExists()
        {
            // Arrange: Create and add a book
            var book = new Book
            {
                Id = 100,
                Title = "Old Book Title",
                Author = "Test Author",
                ISBN = "1234567890"
            };
            _libraryService.AddBook(book);

            // Act: Update the book's title and call EditBook to save changes
            book.Title = "Updated Book Title";
            _libraryService.EditBook(book);

            // Xunit.Assert: Verify that the book's title was updated
            var updatedBook = _libraryService.Books.FirstOrDefault(b => b.Id == book.Id);
            Xunit.Assert.NotNull(updatedBook);  // The book should still exist
            Xunit.Assert.Equal("Updated Book Title", updatedBook.Title);  // Title should be updated
            _libraryService.DeleteBook(book.Id);


        }

        // Test for DeleteBook() - Ensures a book is removed from the collection
        [Fact]
        public void DeleteBook_ShouldRemoveBook_WhenBookExists()
        {
            // Arrange: Create and add a book
            var book = new Book
            {
                Id = 100,
                Title = "Test Book",
                Author = "Test Author",
                ISBN = "1234567890"
            };
            _libraryService.AddBook(book);

            // Act: Delete the book
            _libraryService.DeleteBook(book.Id);

            // Xunit.Assert: Verify that the book was removed from the collection
            var deletedBook = _libraryService.Books.FirstOrDefault(b => b.Id == book.Id);
            Xunit.Assert.Null(deletedBook);  // The book should no longer exist in the list

        }

        // Test for BorrowBook() - Ensures a book is added to the user's borrowed list
        [Fact]
        public void BorrowBook_ShouldAddBookToUser_WhenBookIsBorrowed()
        {
            // Arrange: Create a user and a book
            var user = new Lab5Blazor.Models.User
            {
                Id = 1,
                Name = "User 1",
                Email = "user1@example.com"
            };

            var book = new Book
            {
                Id = 1000,
                Title = "Test Book",
                Author = "Test Author",
                ISBN = "1234567890"
            };

            _libraryService.AddUser(user);  // Add user to the service
            _libraryService.AddBook(book);  // Add book to the service

            // Act: Borrow the book for the user
            _libraryService.BorrowBook(user, book);

            // Xunit.Assert: Verify that the book is in the user's borrowed list
            var borrowedBooks = _libraryService.BorrowedBooks.GetValueOrDefault(user);
            Xunit.Assert.Contains(borrowedBooks, b => b.Title == "Test Book");  // The book should be borrowed
            _libraryService.DeleteBook(book.Id);
            _libraryService.DeleteUser(user.Id);


        }

        // Test for ReturnBook() - Ensures a book is removed from the user's borrowed list
        [Fact]
        public void ReturnBook_ShouldRemoveBookFromUser_WhenBookIsReturned()
        {
            // Arrange: Create a user and a book, and borrow the book
            var user = new Lab5Blazor.Models.User
            {
                Id = 18,
                Name = "Test User",
                Email = "user@example.com"
            };

            var book = new Book
            {
                Id = 18,
                Title = "Test Book",
                Author = "Test Author",
                ISBN = "1234567890"
            };

            _libraryService.AddUser(user);  // Add user to the service
            _libraryService.AddBook(book);  // Add book to the service
            _libraryService.BorrowBook(user, book);  // Borrow the book for the user

            // Act: Return the book
            _libraryService.ReturnBook(user, book);

            // Xunit.Assert: Verify that the book was removed from the borrowed list
            var borrowedBooks = _libraryService.BorrowedBooks.GetValueOrDefault(user);
            Xunit.Assert.DoesNotContain(borrowedBooks, b => b.Title == "Test Book");  // The book should be removed
            _libraryService.DeleteBook(book.Id);
            _libraryService.DeleteUser(user.Id);


        }

        // Edge Case for EditBook() - Editing a non-existent book
        [Fact]
        public void EditBook_ShouldNotUpdate_WhenBookDoesNotExist()
        {
            // Arrange: Create a book that does not exist in the collection
            var book = new Book { Id = 99, Title = "Non-existent Book" };

            // Act: Attempt to edit a non-existent book
            _libraryService.EditBook(book);

            // Xunit.Assert: Ensure that the book does not exist after trying to edit it
            var updatedBook = _libraryService.Books.FirstOrDefault(b => b.Id == 99);
            Xunit.Assert.Null(updatedBook);  // The book should still not exist in the list
            _libraryService.DeleteBook(book.Id);

        }

        // Edge Case for DeleteBook() - Attempt to delete a borrowed book
        [Fact]
        public void DeleteBook_ShouldNotDeleteBorrowedBook()
        {
            // Arrange: Create a user and a book, borrow the book
            var user = new Lab5Blazor.Models.User { Id = 1, Name = "Test User", Email = "user@example.com" };
            var book = new Book { Id = 190, Title = "Test Book", Author = "Test Author", ISBN = "1234567890" };

            _libraryService.AddUser(user);
            _libraryService.AddBook(book);
            _libraryService.BorrowBook(user, book);

            // Act: Try to delete the borrowed book
            _libraryService.DeleteBook(book.Id);

            // Xunit.Assert: The borrowed book should still exist in the list
            var deletedBook = _libraryService.Books.FirstOrDefault(b => b.Id == 1233);
            Xunit.Assert.NotNull(deletedBook);  // The book should still be in the collection
            _libraryService.DeleteBook(book.Id);
            _libraryService.DeleteUser(user.Id);


        }

        // Edge Case for BorrowBook() - Attempt to borrow a book without a user selected
        [Fact]
        
        public void BorrowBook_ShouldNotBorrow_WhenNoUserSelected()
        {
            // Arrange: Create a book, but no user is selected
            var book = new Book { Id = 199, Title = "Test Book", Author = "Test Author", ISBN = "1234567890" };
            _libraryService.AddBook(book);

            // Act: Try to borrow the book without selecting a user
            //_libraryService.BorrowBook(null, book);

            // Xunit.Assert: Ensure that the book is not borrowed (no user selected)
            var borrowedBooks = _libraryService.BorrowedBooks.Values.SelectMany(b => b).ToList();
            Xunit.Assert.DoesNotContain(borrowedBooks, b => b.Title == "Test Book2");  // The book should not be borrowed
            _libraryService.DeleteBook(book.Id);

        }

        // Edge Case for ReturnBook() - Attempt to return a book that was never borrowed
        [Fact]
        public void ReturnBook_ShouldNotRemoveBook_WhenBookWasNotBorrowed()
        {
            // Arrange: Create a user and a book, but don't borrow the book
            var user = new Lab5Blazor.Models.User { Id = 122, Name = "Test User", Email = "user@example.com" };
            var book = new Book { Id = 152, Title = "Not Borrowed Book" };

            _libraryService.AddUser(user);
            _libraryService.AddBook(book);

            // Act: Try to return a book that wasn't borrowed
            _libraryService.ReturnBook(user, book);

            // Xunit.Assert: Ensure that the book is not removed from the borrowed list (because it wasn't borrowed)
            var borrowedBooks = _libraryService.BorrowedBooks.GetValueOrDefault(user);
            //Xunit.Assert.DoesNotContain(borrowedBooks, b => b.Title == "Not Borrowed23 Book");  // Book should not be in the list
            Xunit.Assert.Null(borrowedBooks);
            _libraryService.DeleteBook(book.Id);
            _libraryService.DeleteUser(user.Id);


        }

        // Edge Case for BorrowBook() - Attempt to borrow a book that is already borrowed by someone else
        [Fact]
        public void BorrowBook_ShouldNotAllowMultipleUsersToBorrowSameBook()
        {
            // Arrange: Create two users and a book
            var user1 = new Lab5Blazor.Models.User { Id = 123, Name = "User 1", Email = "user1@example.com" };
            var user2 = new Lab5Blazor.Models.User { Id = 223, Name = "User 2", Email = "user2@example.com" };
            var book = new Book { Id = 1233, Title = "Test Book", Author = "Test Author", ISBN = "1234567890" };

            _libraryService.AddUser(user1);
            _libraryService.AddUser(user2);
            _libraryService.AddBook(book);

            // Act: Borrow the book for User 1
            _libraryService.BorrowBook(user1, book);

            // Act: Try to borrow the same book for User 2 (this should fail, as it’s already borrowed)
            _libraryService.BorrowBook(user2, book);

            // Xunit.Assert: The book should still only be in User 1's borrowed list
            var borrowedBooksUser1 = _libraryService.BorrowedBooks.GetValueOrDefault(user1);
            var borrowedBooksUser2 = _libraryService.BorrowedBooks.GetValueOrDefault(user2);

            Xunit.Assert.Contains(borrowedBooksUser1, b => b.Title == "Test Book");  // User 1 should have the book
            Xunit.Assert.DoesNotContain(borrowedBooksUser2, b => b.Title == "Test Book1");  // User 2 should not have the book
            _libraryService.DeleteBook(book.Id);
            _libraryService.DeleteUser(user1.Id);
            _libraryService.DeleteUser(user2.Id);


        }
    }
}
